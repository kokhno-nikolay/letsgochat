// Code generated by MockGen. DO NOT EDIT.
// Source: .\services\services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/kokhno-nikolay/letsgochat/models"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsers) Create(arg0 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), arg0)
}

// FindById mocks base method.
func (m *MockUsers) FindById(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUsersMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUsers)(nil).FindById), arg0)
}

// FindByUsername mocks base method.
func (m *MockUsers) FindByUsername(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockUsersMockRecorder) FindByUsername(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockUsers)(nil).FindByUsername), arg0)
}

// GetActiveUsers mocks base method.
func (m *MockUsers) GetActiveUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveUsers indicates an expected call of GetActiveUsers.
func (mr *MockUsersMockRecorder) GetActiveUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsers", reflect.TypeOf((*MockUsers)(nil).GetActiveUsers))
}

// SwitchToActive mocks base method.
func (m *MockUsers) SwitchToActive(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchToActive", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchToActive indicates an expected call of SwitchToActive.
func (mr *MockUsersMockRecorder) SwitchToActive(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchToActive", reflect.TypeOf((*MockUsers)(nil).SwitchToActive), userID)
}

// SwitchToInactive mocks base method.
func (m *MockUsers) SwitchToInactive(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwitchToInactive", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SwitchToInactive indicates an expected call of SwitchToInactive.
func (mr *MockUsersMockRecorder) SwitchToInactive(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwitchToInactive", reflect.TypeOf((*MockUsers)(nil).SwitchToInactive), userID)
}

// UserExists mocks base method.
func (m *MockUsers) UserExists(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExists indicates an expected call of UserExists.
func (mr *MockUsersMockRecorder) UserExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExists", reflect.TypeOf((*MockUsers)(nil).UserExists), arg0)
}

// MockMessages is a mock of Messages interface.
type MockMessages struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesMockRecorder
}

// MockMessagesMockRecorder is the mock recorder for MockMessages.
type MockMessagesMockRecorder struct {
	mock *MockMessages
}

// NewMockMessages creates a new mock instance.
func NewMockMessages(ctrl *gomock.Controller) *MockMessages {
	mock := &MockMessages{ctrl: ctrl}
	mock.recorder = &MockMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessages) EXPECT() *MockMessagesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessages) Create(message models.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessagesMockRecorder) Create(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessages)(nil).Create), message)
}

// GetAll mocks base method.
func (m *MockMessages) GetAll() ([]models.ChatMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.ChatMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMessagesMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMessages)(nil).GetAll))
}
